**A variety of select statements using the PurchaseOrder Database created before**

**Retrieves all purchase orders that are needed within a certain month range**

SELECT 
    PurchaseOrder.PODateNeeded,
    PurchaseOrder.PONumber,
    PurchaseOrder.PODatePlaced,
    Vendor.VendorName,
CONCAT('(', LEFT(LTRIM(RTRIM(Vendor.VendorPhone)), 3), ') ', SUBSTRING(LTRIM(RTRIM(Vendor.VendorPhone)), 4, 3), '-', RIGHT(LTRIM(RTRIM(Vendor.VendorPhone)), 4)) AS VendorPhoneNumber,
PurchaseOrder.BuyerEmpID
FROM PurchaseOrder
JOIN Vendor ON PurchaseOrder.VendorID = Vendor.VendorID
WHERE 
    MONTH(PurchaseOrder.PODateNeeded) IN (3, 4)
    AND YEAR(PurchaseOrder.PODateNeeded) = YEAR(GETDATE())
ORDER BY 
    MONTH(PurchaseOrder.PODateNeeded) DESC,
    PurchaseOrder.PODateNeeded DESC;

**Summarizes the receiving status of every line with the PurchaseOrderLine table**
**CASE statements for receiving statuses**

SELECT
    PurchaseOrder.PONumber,
    Vendor.VendorName,
    PurchaseOrderLine.ProductID,
    Product.ProductDescription,
    PurchaseOrderLine.DateNeeded AS ProductDateNeeded,
    PurchaseOrderLine.QtyOrdered AS QuantityOrdered,
    SUM(ISNULL(Receiver.QtyReceived, 0)) AS TotalQuantityReceived,
    PurchaseOrderLine.QtyOrdered - SUM(ISNULL(Receiver.QtyReceived, 0)) AS QuantityRemainingToBeReceived,
	CASE
        WHEN PurchaseOrderLine.QtyOrdered - SUM(ISNULL(Receiver.QtyReceived, 0)) = 0 THEN 'Complete'
        WHEN PurchaseOrderLine.QtyOrdered - SUM(ISNULL(Receiver.QtyReceived, 0)) < 0 THEN 'Over Shipment'
        WHEN PurchaseOrderLine.QtyOrdered - SUM(ISNULL(Receiver.QtyReceived, 0)) > 0 THEN 'Partial Shipment'
        ELSE 'Not Received'
    END AS ShippingStatus
FROM 
    PurchaseOrder
JOIN 
    PurchaseOrderLine ON PurchaseOrder.PONumber = PurchaseOrderLine.PONumber
JOIN 
    Product ON PurchaseOrderLine.ProductID = Product.ProductID
JOIN 
    Vendor ON PurchaseOrder.VendorID = Vendor.VendorID
LEFT JOIN 
    Receiver ON PurchaseOrderLine.POLineID = Receiver.POLineID
GROUP BY 
    PurchaseOrder.PONumber,
    Vendor.VendorName,
    PurchaseOrderLine.ProductID,
    Product.ProductDescription,
    PurchaseOrderLine.DateNeeded,
    PurchaseOrderLine.QtyOrdered;

**Lists all products in the reciever table that were recieved in a damaged state**
**Utilizes a LIKE condition to find all instances of "damage"**

SELECT 
    PurchaseOrderLine.POLineId,
    Receiver.QtyReceived,
    Condition.ConditionDescription
FROM PurchaseOrderLine
JOIN Receiver ON PurchaseOrderLine.POLineID = Receiver.POLineID
JOIN Condition ON Receiver.ConditionID = Condition.ConditionID
WHERE 
LOWER(ConditionDescription) LIKE '%damage%'
ORDER BY 
PurchaseOrderLine.POLineID ASC;

**Summarized Report of about each product within the product table**
**Includes how many orders, quantity ordered, Max, Min and Average Price Paid**

SELECT
  Product.ProductId,
  Product.ProductDescription,
  ISNULL(COUNT(DISTINCT PurchaseOrderLine.PONumber), 0) AS CountofPurchaseOrders,
  ISNULL(SUM(PurchaseOrderLine.QtyOrdered), 0) AS TotalQuantityOrdered,
  ISNULL(MAX(PurchaseOrderLine.Price), 0) AS MaxPricePaid,
  ISNULL(MIN(PurchaseOrderLine.Price), 0) AS MinPricePaid,
  ISNULL(AVG(PurchaseOrderLine.Price), 0) AS AveragePricePaid
FROM Product
LEFT JOIN PurchaseOrderLine ON Product.ProductID = PurchaseOrderLine.ProductID
GROUP BY Product.ProductID,Product.ProductDescription
ORDER BY Product.ProductID;
